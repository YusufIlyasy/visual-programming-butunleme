<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>Güvenli besin, besleyici değerini kaybetmemiş; fiziksel, kimyasal ve mikrobiyolojik açıdan temiz, bozulmamış besindir. Besin 
güvenliğini bozan etkenler başta bebekler, çocuklar, gebeler, yaşlılar ve hastalarolmak üzere tüm toplumu etkileyen sağlık 
sorunlarının ortaya çıkmasına zemin hazırlar. Güvenilir besinin elde edilebilmesi için hasattan tüketime kadar geçen tüm 
aşamalarda besinin çeşitli kaynaklardan kirlenmesinin önlenmesi gerekir.</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Besinlerin kirlenmesi üç şekilde olur:
a) Fiziksel kirlenme: Besin maddelerinin üzerine ya da içine besin olmayan yabancı maddelerin karışması ile ortaya çıkar. Besinin 
üzerinde bulunan cam kırıkları, kıymık, metal parçaları, saç, tırnak, taş, sinek, böcek vb. yabancı cisimler fiziksel kirlenmeye neden 
olabilir.
b) Kimyasal kirlenme: Besinlere kimyasal maddelerin istenmeden karışması ya da çeşitli sebeplerle kimyasalların eklenmesi sonucu 
ortaya çıkar. Besinin içinde saklandığı kaptan çözünme sonucu geçen metaller, tarım ilaçları, iyi durulanmayan kaplardan geçen 
deterjanlar, besin ambalajında kullanılan plastikler (özellikle renkli plastikler), önerilen miktarın üzerinde kullanılan gıda katkı 
maddeleri kimyasal kirlenmeye sebep olabilir.
c) Biyolojik kirlenme: Besinlerin uygun ve hijyenik koşullarda saklanamaması nedeniyle ortaya çıkar. Besinin bileşiminde doğal 
olarak bulunan bazı zehirli maddeler (yeşillenmiş ve filizlenmiş patates, zehirli bal, bazı mantar türleri vb.) vehızla üreyen 
mikroorganizmalar biyolojik kirlenmeye neden olabilir. Mikroorganizmalar hava, toz, toprak, çöpler, çiğ besinler, haşereler 
ya da insanlar aracılığıyla besinlere bulaşarak kirlenmesine yol açabilirler.
Besin güvenliğini tehdit eden etmenlerin başında patojen (hastalık yapıcı) bakteriler gelmektedir</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Besin güvenliğini sağlamada temel ilke, yiyecek ve içeceklerin satın alınmasından tüketimine kadar geçen tüm aşamalarda hijyen 
ve sanitasyonun (gıda hijyeni) sağlanmasıdır. Besin güvenliğini sağlamak için kişisel hijyene uyulmalı; besinlerin yıkandığı, pişirildiği 
araç gereçlerin hijyeni ve besinlerin hijyeni sağlanmalıdır.
Kişisel Hijyen
Besinlere mikroorganizma bulaştıran en önemli kaynaklardan biri yemeği hazırlayan kişilerdir. Bu sebeple yemek hazırlayan kişilerin 
kişisel temizlik ve hijyene önem vermesi gerekir.
Kişisel hijyen; el ve vücut temizliği, çalışırken giyilecek olan uygun iş kıyafetlerinin (önlük, eldiven, maske, kep vb.) seçimi, kıyafetlerin 
temizliği ve çalışan personelin genel sağlığı gibi konuları kapsar.
Besin hazırlanırken uyulması gereken kişisel hijyen kuralları şunlardır:
• Genel vücut temizliğine özen gösterilmelidir.
• Mutfak önlükleri uygun aralıklarla yıkanmalıdır.
• Yiyecek ve içecekler hazırlanırken saç dökülmelerine karşı önlem alınmalıdır.
• Besinler hazırlanırken ağız, burun, sakal, bıyık ve saçlara dokunulmamalıdır.
• Öksürme ve hapşırma sırasında mutlaka kâğıt
mendil kullanılmalıdır.
• Yemeklerin tat kontrolleri yemeğin karıştırıldığı kaşık ile değil, ayrı bir kaşık ile yapılmalıdır.
• Tırnaklar ojesiz, kısa ve temiz tutulmalıdır.</value>
  </data>
</root>